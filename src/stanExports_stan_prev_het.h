// Generated by rstantools.  Do not edit by hand.

/*
    hiddenmeta is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hiddenmeta is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hiddenmeta.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_stan_prev_het_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 40> locations_array__ =
  {" (found before start of program)",
  " (in 'stan_prev_het', line 18, column 2 to column 19)",
  " (in 'stan_prev_het', line 19, column 2 to column 19)",
  " (in 'stan_prev_het', line 20, column 2 to column 35)",
  " (in 'stan_prev_het', line 23, column 2 to column 34)",
  " (in 'stan_prev_het', line 25, column 6 to column 88)",
  " (in 'stan_prev_het', line 24, column 2 to line 25, column 88)",
  " (in 'stan_prev_het', line 28, column 2 to column 58)",
  " (in 'stan_prev_het', line 29, column 2 to column 51)",
  " (in 'stan_prev_het', line 30, column 2 to column 54)",
  " (in 'stan_prev_het', line 31, column 2 to column 54)",
  " (in 'stan_prev_het', line 2, column 2 to column 17)",
  " (in 'stan_prev_het', line 3, column 2 to column 17)",
  " (in 'stan_prev_het', line 4, column 2 to column 22)",
  " (in 'stan_prev_het', line 5, column 9 to column 10)",
  " (in 'stan_prev_het', line 5, column 2 to column 22)",
  " (in 'stan_prev_het', line 6, column 33 to column 34)",
  " (in 'stan_prev_het', line 6, column 2 to column 36)",
  " (in 'stan_prev_het', line 7, column 31 to column 32)",
  " (in 'stan_prev_het', line 7, column 2 to column 34)",
  " (in 'stan_prev_het', line 8, column 34 to column 35)",
  " (in 'stan_prev_het', line 8, column 2 to column 37)",
  " (in 'stan_prev_het', line 9, column 32 to column 33)",
  " (in 'stan_prev_het', line 9, column 2 to column 35)",
  " (in 'stan_prev_het', line 10, column 34 to column 35)",
  " (in 'stan_prev_het', line 10, column 2 to column 37)",
  " (in 'stan_prev_het', line 11, column 32 to column 33)",
  " (in 'stan_prev_het', line 11, column 2 to column 35)",
  " (in 'stan_prev_het', line 12, column 21 to column 27)",
  " (in 'stan_prev_het', line 12, column 2 to column 29)",
  " (in 'stan_prev_het', line 13, column 22 to column 28)",
  " (in 'stan_prev_het', line 13, column 2 to column 30)",
  " (in 'stan_prev_het', line 14, column 18 to column 24)",
  " (in 'stan_prev_het', line 14, column 2 to column 31)",
  " (in 'stan_prev_het', line 15, column 18 to column 24)",
  " (in 'stan_prev_het', line 15, column 2 to column 30)",
  " (in 'stan_prev_het', line 18, column 9 to column 10)",
  " (in 'stan_prev_het', line 19, column 9 to column 10)",
  " (in 'stan_prev_het', line 20, column 26 to column 27)",
  " (in 'stan_prev_het', line 23, column 21 to column 27)"};
#include <stan_meta_header.hpp>
class model_stan_prev_het final : public model_base_crtp<model_stan_prev_het> {
private:
  int N;
  int K;
  int n_ests;
  Eigen::Matrix<double,-1,1> covariate_data__;
  std::vector<double> alpha_prior_mean;
  std::vector<double> alpha_prior_sd;
  std::vector<double> bias_a_prior_mean;
  std::vector<double> bias_a_prior_sd;
  std::vector<double> bias_b_prior_mean;
  std::vector<double> bias_b_prior_sd;
  std::vector<int> study;
  std::vector<int> design;
  Eigen::Matrix<double,-1,1> ests_data__;
  Eigen::Matrix<double,-1,1> ses_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> covariate{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ests{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ses{nullptr, 0};
public:
  ~model_stan_prev_het() {}
  model_stan_prev_het(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_stan_prev_het_namespace::model_stan_prev_het";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 11;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 11;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 12;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 12;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 13;
      context__.validate_dims("data initialization", "n_ests", "int",
        std::vector<size_t>{});
      n_ests = std::numeric_limits<int>::min();
      current_statement__ = 13;
      n_ests = context__.vals_i("n_ests")[(1 - 1)];
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "n_ests", n_ests, 0);
      current_statement__ = 14;
      stan::math::validate_non_negative_index("covariate", "N", N);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "covariate", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      covariate_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                           std::numeric_limits<double>::quiet_NaN());
      new (&covariate)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(covariate_data__.data(), N);
      {
        std::vector<local_scalar_t__> covariate_flat__;
        current_statement__ = 15;
        covariate_flat__ = context__.vals_r("covariate");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 15;
          stan::model::assign(covariate, covariate_flat__[(pos__ - 1)],
            "assigning variable covariate", stan::model::index_uni(sym1__));
          current_statement__ = 15;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 16;
      stan::math::validate_non_negative_index("alpha_prior_mean", "N", N);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "alpha_prior_mean",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      alpha_prior_mean = std::vector<double>(N,
                           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      alpha_prior_mean = context__.vals_r("alpha_prior_mean");
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "alpha_prior_mean",
        alpha_prior_mean, 0);
      current_statement__ = 18;
      stan::math::validate_non_negative_index("alpha_prior_sd", "N", N);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "alpha_prior_sd",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      alpha_prior_sd = std::vector<double>(N,
                         std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      alpha_prior_sd = context__.vals_r("alpha_prior_sd");
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "alpha_prior_sd",
        alpha_prior_sd, 0);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("bias_a_prior_mean", "K", K);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "bias_a_prior_mean",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      bias_a_prior_mean = std::vector<double>(K,
                            std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 21;
      bias_a_prior_mean = context__.vals_r("bias_a_prior_mean");
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "bias_a_prior_mean",
        bias_a_prior_mean, 0);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("bias_a_prior_sd", "K", K);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "bias_a_prior_sd",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      bias_a_prior_sd = std::vector<double>(K,
                          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 23;
      bias_a_prior_sd = context__.vals_r("bias_a_prior_sd");
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "bias_a_prior_sd",
        bias_a_prior_sd, 0);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("bias_b_prior_mean", "K", K);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "bias_b_prior_mean",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      bias_b_prior_mean = std::vector<double>(K,
                            std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 25;
      bias_b_prior_mean = context__.vals_r("bias_b_prior_mean");
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "bias_b_prior_mean",
        bias_b_prior_mean, 0);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("bias_b_prior_sd", "K", K);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "bias_b_prior_sd",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      bias_b_prior_sd = std::vector<double>(K,
                          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 27;
      bias_b_prior_sd = context__.vals_r("bias_b_prior_sd");
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "bias_b_prior_sd",
        bias_b_prior_sd, 0);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("study", "n_ests", n_ests);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "study", "int",
        std::vector<size_t>{static_cast<size_t>(n_ests)});
      study = std::vector<int>(n_ests, std::numeric_limits<int>::min());
      current_statement__ = 29;
      study = context__.vals_i("study");
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "study", study, 0);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("design", "n_ests", n_ests);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "design", "int",
        std::vector<size_t>{static_cast<size_t>(n_ests)});
      design = std::vector<int>(n_ests, std::numeric_limits<int>::min());
      current_statement__ = 31;
      design = context__.vals_i("design");
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "design", design, 0);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("ests", "n_ests", n_ests);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "ests", "double",
        std::vector<size_t>{static_cast<size_t>(n_ests)});
      ests_data__ = Eigen::Matrix<double,-1,1>::Constant(n_ests,
                      std::numeric_limits<double>::quiet_NaN());
      new (&ests) Eigen::Map<Eigen::Matrix<double,-1,1>>(ests_data__.data(),
        n_ests);
      {
        std::vector<local_scalar_t__> ests_flat__;
        current_statement__ = 33;
        ests_flat__ = context__.vals_r("ests");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= n_ests; ++sym1__) {
          current_statement__ = 33;
          stan::model::assign(ests, ests_flat__[(pos__ - 1)],
            "assigning variable ests", stan::model::index_uni(sym1__));
          current_statement__ = 33;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "ests", ests, 0);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("ses", "n_ests", n_ests);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "ses", "double",
        std::vector<size_t>{static_cast<size_t>(n_ests)});
      ses_data__ = Eigen::Matrix<double,-1,1>::Constant(n_ests,
                     std::numeric_limits<double>::quiet_NaN());
      new (&ses) Eigen::Map<Eigen::Matrix<double,-1,1>>(ses_data__.data(),
        n_ests);
      {
        std::vector<local_scalar_t__> ses_flat__;
        current_statement__ = 35;
        ses_flat__ = context__.vals_r("ses");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= n_ests; ++sym1__) {
          current_statement__ = 35;
          stan::model::assign(ses, ses_flat__[(pos__ - 1)],
            "assigning variable ses", stan::model::index_uni(sym1__));
          current_statement__ = 35;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "ses", ses, 0);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("bias_a", "K", K);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("bias_b", "K", K);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("alpha", "N", N);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("bias", "n_ests", n_ests);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = K + K + N;
  }
  inline std::string model_name() const final {
    return "model_stan_prev_het";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_stan_prev_het_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> bias_a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      bias_a = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> bias_b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      bias_b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 3;
      alpha = in__.template read_constrain_lub<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
                N);
      Eigen::Matrix<local_scalar_t__,-1,1> bias =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_ests, DUMMY_VAR__);
      current_statement__ = 6;
      for (int x = 1; x <= n_ests; ++x) {
        current_statement__ = 5;
        stan::model::assign(bias,
          stan::math::exp(
            ((stan::model::rvalue(bias_a, "bias_a",
                stan::model::index_uni(
                  stan::model::rvalue(design, "design",
                    stan::model::index_uni(x)))) +
            (stan::model::rvalue(bias_b, "bias_b",
               stan::model::index_uni(
                 stan::model::rvalue(design, "design",
                   stan::model::index_uni(x)))) *
            stan::model::rvalue(covariate, "covariate",
              stan::model::index_uni(
                stan::model::rvalue(study, "study", stan::model::index_uni(x))))))
            - 1)), "assigning variable bias", stan::model::index_uni(x));
      }
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "bias", bias, 0.01);
      {
        current_statement__ = 7;
        lp_accum__.add(stan::math::normal_lpdf<false>(ests,
                         stan::math::elt_multiply(bias,
                           stan::model::rvalue(alpha, "alpha",
                             stan::model::index_multi(study))), ses));
        current_statement__ = 8;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha,
                         alpha_prior_mean, alpha_prior_sd));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(bias_a,
                         bias_a_prior_mean, bias_a_prior_sd));
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(bias_b,
                         bias_b_prior_mean, bias_b_prior_sd));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_stan_prev_het_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> bias_a =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      bias_a = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> bias_b =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      bias_b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      alpha = in__.template read_constrain_lub<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
                N);
      Eigen::Matrix<double,-1,1> bias =
        Eigen::Matrix<double,-1,1>::Constant(n_ests,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(bias_a);
      out__.write(bias_b);
      out__.write(alpha);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      for (int x = 1; x <= n_ests; ++x) {
        current_statement__ = 5;
        stan::model::assign(bias,
          stan::math::exp(
            ((stan::model::rvalue(bias_a, "bias_a",
                stan::model::index_uni(
                  stan::model::rvalue(design, "design",
                    stan::model::index_uni(x)))) +
            (stan::model::rvalue(bias_b, "bias_b",
               stan::model::index_uni(
                 stan::model::rvalue(design, "design",
                   stan::model::index_uni(x)))) *
            stan::model::rvalue(covariate, "covariate",
              stan::model::index_uni(
                stan::model::rvalue(study, "study", stan::model::index_uni(x))))))
            - 1)), "assigning variable bias", stan::model::index_uni(x));
      }
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "bias", bias, 0.01);
      if (emit_transformed_parameters__) {
        out__.write(bias);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> bias_a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(bias_a,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable bias_a");
      out__.write(bias_a);
      Eigen::Matrix<local_scalar_t__,-1,1> bias_b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(bias_b,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable bias_b");
      out__.write(bias_b);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable alpha");
      out__.write_free_lub(0, 1, alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "bias_a", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "bias_b", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> bias_a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> bias_a_flat__;
        current_statement__ = 1;
        bias_a_flat__ = context__.vals_r("bias_a");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(bias_a, bias_a_flat__[(pos__ - 1)],
            "assigning variable bias_a", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(bias_a);
      Eigen::Matrix<local_scalar_t__,-1,1> bias_b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> bias_b_flat__;
        current_statement__ = 2;
        bias_b_flat__ = context__.vals_r("bias_b");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(bias_b, bias_b_flat__[(pos__ - 1)],
            "assigning variable bias_b", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(bias_b);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 3;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"bias_a", "bias_b", "alpha"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"bias"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(N)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_ests)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "bias_a" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "bias_b" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_ests; ++sym1__) {
        param_names__.emplace_back(std::string() + "bias" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "bias_a" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "bias_b" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_ests; ++sym1__) {
        param_names__.emplace_back(std::string() + "bias" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"bias_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"bias_b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"bias\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_ests) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"bias_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"bias_b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"bias\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_ests) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((K + K) + N);
    const size_t num_transformed = emit_transformed_parameters * (n_ests);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((K + K) + N);
    const size_t num_transformed = emit_transformed_parameters * (n_ests);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_stan_prev_het_namespace::model_stan_prev_het;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_stan_prev_het_namespace::profiles__;
}
#endif
#endif
