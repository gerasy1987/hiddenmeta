// Generated by rstantools.  Do not edit by hand.

/*
    hiddenmeta is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hiddenmeta is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hiddenmeta.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_stan_size_het_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_stan_size_het");
    reader.add_event(38, 36, "end", "model_stan_size_het");
    return reader;
}
#include <stan_meta_header.hpp>
class model_stan_size_het
  : public stan::model::model_base_crtp<model_stan_size_het> {
private:
        int N;
        int K;
        int n_ests;
        vector_d covariate;
        std::vector<double> alpha_prior_mean;
        std::vector<double> alpha_prior_sd;
        std::vector<double> bias_a_prior_mean;
        std::vector<double> bias_a_prior_sd;
        std::vector<double> bias_b_prior_mean;
        std::vector<double> bias_b_prior_sd;
        std::vector<int> study;
        std::vector<int> design;
        vector_d ests;
        vector_d ses;
public:
    model_stan_size_het(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_stan_size_het(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_stan_size_het_namespace::model_stan_size_het";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_ests", "int", context__.to_vec());
            n_ests = int(0);
            vals_i__ = context__.vals_i("n_ests");
            pos__ = 0;
            n_ests = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_ests", n_ests, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("covariate", "N", N);
            context__.validate_dims("data initialization", "covariate", "vector_d", context__.to_vec(N));
            covariate = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("covariate");
            pos__ = 0;
            size_t covariate_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < covariate_j_1_max__; ++j_1__) {
                covariate(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("alpha_prior_mean", "N", N);
            context__.validate_dims("data initialization", "alpha_prior_mean", "double", context__.to_vec(N));
            alpha_prior_mean = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("alpha_prior_mean");
            pos__ = 0;
            size_t alpha_prior_mean_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < alpha_prior_mean_k_0_max__; ++k_0__) {
                alpha_prior_mean[k_0__] = vals_r__[pos__++];
            }
            size_t alpha_prior_mean_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < alpha_prior_mean_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "alpha_prior_mean[i_0__]", alpha_prior_mean[i_0__], 0);
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("alpha_prior_sd", "N", N);
            context__.validate_dims("data initialization", "alpha_prior_sd", "double", context__.to_vec(N));
            alpha_prior_sd = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("alpha_prior_sd");
            pos__ = 0;
            size_t alpha_prior_sd_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < alpha_prior_sd_k_0_max__; ++k_0__) {
                alpha_prior_sd[k_0__] = vals_r__[pos__++];
            }
            size_t alpha_prior_sd_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < alpha_prior_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "alpha_prior_sd[i_0__]", alpha_prior_sd[i_0__], 0);
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("bias_a_prior_mean", "K", K);
            context__.validate_dims("data initialization", "bias_a_prior_mean", "double", context__.to_vec(K));
            bias_a_prior_mean = std::vector<double>(K, double(0));
            vals_r__ = context__.vals_r("bias_a_prior_mean");
            pos__ = 0;
            size_t bias_a_prior_mean_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < bias_a_prior_mean_k_0_max__; ++k_0__) {
                bias_a_prior_mean[k_0__] = vals_r__[pos__++];
            }
            size_t bias_a_prior_mean_i_0_max__ = K;
            for (size_t i_0__ = 0; i_0__ < bias_a_prior_mean_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "bias_a_prior_mean[i_0__]", bias_a_prior_mean[i_0__], 0);
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("bias_a_prior_sd", "K", K);
            context__.validate_dims("data initialization", "bias_a_prior_sd", "double", context__.to_vec(K));
            bias_a_prior_sd = std::vector<double>(K, double(0));
            vals_r__ = context__.vals_r("bias_a_prior_sd");
            pos__ = 0;
            size_t bias_a_prior_sd_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < bias_a_prior_sd_k_0_max__; ++k_0__) {
                bias_a_prior_sd[k_0__] = vals_r__[pos__++];
            }
            size_t bias_a_prior_sd_i_0_max__ = K;
            for (size_t i_0__ = 0; i_0__ < bias_a_prior_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "bias_a_prior_sd[i_0__]", bias_a_prior_sd[i_0__], 0);
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("bias_b_prior_mean", "K", K);
            context__.validate_dims("data initialization", "bias_b_prior_mean", "double", context__.to_vec(K));
            bias_b_prior_mean = std::vector<double>(K, double(0));
            vals_r__ = context__.vals_r("bias_b_prior_mean");
            pos__ = 0;
            size_t bias_b_prior_mean_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < bias_b_prior_mean_k_0_max__; ++k_0__) {
                bias_b_prior_mean[k_0__] = vals_r__[pos__++];
            }
            size_t bias_b_prior_mean_i_0_max__ = K;
            for (size_t i_0__ = 0; i_0__ < bias_b_prior_mean_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "bias_b_prior_mean[i_0__]", bias_b_prior_mean[i_0__], 0);
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("bias_b_prior_sd", "K", K);
            context__.validate_dims("data initialization", "bias_b_prior_sd", "double", context__.to_vec(K));
            bias_b_prior_sd = std::vector<double>(K, double(0));
            vals_r__ = context__.vals_r("bias_b_prior_sd");
            pos__ = 0;
            size_t bias_b_prior_sd_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < bias_b_prior_sd_k_0_max__; ++k_0__) {
                bias_b_prior_sd[k_0__] = vals_r__[pos__++];
            }
            size_t bias_b_prior_sd_i_0_max__ = K;
            for (size_t i_0__ = 0; i_0__ < bias_b_prior_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "bias_b_prior_sd[i_0__]", bias_b_prior_sd[i_0__], 0);
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("study", "n_ests", n_ests);
            context__.validate_dims("data initialization", "study", "int", context__.to_vec(n_ests));
            study = std::vector<int>(n_ests, int(0));
            vals_i__ = context__.vals_i("study");
            pos__ = 0;
            size_t study_k_0_max__ = n_ests;
            for (size_t k_0__ = 0; k_0__ < study_k_0_max__; ++k_0__) {
                study[k_0__] = vals_i__[pos__++];
            }
            size_t study_i_0_max__ = n_ests;
            for (size_t i_0__ = 0; i_0__ < study_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "study[i_0__]", study[i_0__], 0);
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("design", "n_ests", n_ests);
            context__.validate_dims("data initialization", "design", "int", context__.to_vec(n_ests));
            design = std::vector<int>(n_ests, int(0));
            vals_i__ = context__.vals_i("design");
            pos__ = 0;
            size_t design_k_0_max__ = n_ests;
            for (size_t k_0__ = 0; k_0__ < design_k_0_max__; ++k_0__) {
                design[k_0__] = vals_i__[pos__++];
            }
            size_t design_i_0_max__ = n_ests;
            for (size_t i_0__ = 0; i_0__ < design_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "design[i_0__]", design[i_0__], 0);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("ests", "n_ests", n_ests);
            context__.validate_dims("data initialization", "ests", "vector_d", context__.to_vec(n_ests));
            ests = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_ests);
            vals_r__ = context__.vals_r("ests");
            pos__ = 0;
            size_t ests_j_1_max__ = n_ests;
            for (size_t j_1__ = 0; j_1__ < ests_j_1_max__; ++j_1__) {
                ests(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "ests", ests, 0);
            current_statement_begin__ = 15;
            validate_non_negative_index("ses", "n_ests", n_ests);
            context__.validate_dims("data initialization", "ses", "vector_d", context__.to_vec(n_ests));
            ses = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_ests);
            vals_r__ = context__.vals_r("ses");
            pos__ = 0;
            size_t ses_j_1_max__ = n_ests;
            for (size_t j_1__ = 0; j_1__ < ses_j_1_max__; ++j_1__) {
                ses(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "ses", ses, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 18;
            validate_non_negative_index("bias_a", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 19;
            validate_non_negative_index("bias_b", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 20;
            validate_non_negative_index("alpha", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_stan_size_het() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 18;
        if (!(context__.contains_r("bias_a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable bias_a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("bias_a");
        pos__ = 0U;
        validate_non_negative_index("bias_a", "K", K);
        context__.validate_dims("parameter initialization", "bias_a", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> bias_a(K);
        size_t bias_a_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < bias_a_j_1_max__; ++j_1__) {
            bias_a(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(bias_a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable bias_a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 19;
        if (!(context__.contains_r("bias_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable bias_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("bias_b");
        pos__ = 0U;
        validate_non_negative_index("bias_b", "K", K);
        context__.validate_dims("parameter initialization", "bias_b", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> bias_b(K);
        size_t bias_b_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < bias_b_j_1_max__; ++j_1__) {
            bias_b(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(bias_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable bias_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 20;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "N", N);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(N);
        size_t alpha_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 18;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> bias_a;
            (void) bias_a;  // dummy to suppress unused var warning
            if (jacobian__)
                bias_a = in__.vector_constrain(K, lp__);
            else
                bias_a = in__.vector_constrain(K);
            current_statement_begin__ = 19;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> bias_b;
            (void) bias_b;  // dummy to suppress unused var warning
            if (jacobian__)
                bias_b = in__.vector_constrain(K, lp__);
            else
                bias_b = in__.vector_constrain(K);
            current_statement_begin__ = 20;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_lb_constrain(0, N, lp__);
            else
                alpha = in__.vector_lb_constrain(0, N);
            // transformed parameters
            current_statement_begin__ = 23;
            validate_non_negative_index("bias", "n_ests", n_ests);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> bias(n_ests);
            stan::math::initialize(bias, DUMMY_VAR__);
            stan::math::fill(bias, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 25;
            for (int x = 1; x <= n_ests; ++x) {
                current_statement_begin__ = 26;
                stan::model::assign(bias, 
                            stan::model::cons_list(stan::model::index_uni(x), stan::model::nil_index_list()), 
                            stan::math::exp(((get_base1(bias_a, get_base1(design, x, "design", 1), "bias_a", 1) + (get_base1(bias_b, get_base1(design, x, "design", 1), "bias_b", 1) * get_base1(covariate, get_base1(study, x, "study", 1), "covariate", 1))) - 1)), 
                            "assigning variable bias");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 23;
            size_t bias_j_1_max__ = n_ests;
            for (size_t j_1__ = 0; j_1__ < bias_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(bias(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: bias" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable bias: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "bias", bias, 0.01);
            // model body
            current_statement_begin__ = 31;
            lp_accum__.add(normal_log(ests, elt_multiply(bias, stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_multi(study), stan::model::nil_index_list()), "alpha")), ses));
            current_statement_begin__ = 32;
            lp_accum__.add(normal_log<propto__>(alpha, alpha_prior_mean, alpha_prior_sd));
            current_statement_begin__ = 33;
            lp_accum__.add(normal_log<propto__>(bias_a, bias_a_prior_mean, bias_a_prior_sd));
            current_statement_begin__ = 34;
            lp_accum__.add(normal_log<propto__>(bias_b, bias_b_prior_mean, bias_b_prior_sd));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("bias_a");
        names__.push_back("bias_b");
        names__.push_back("alpha");
        names__.push_back("bias");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ests);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_stan_size_het_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> bias_a = in__.vector_constrain(K);
        size_t bias_a_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < bias_a_j_1_max__; ++j_1__) {
            vars__.push_back(bias_a(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> bias_b = in__.vector_constrain(K);
        size_t bias_b_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < bias_b_j_1_max__; ++j_1__) {
            vars__.push_back(bias_b(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_lb_constrain(0, N);
        size_t alpha_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 23;
            validate_non_negative_index("bias", "n_ests", n_ests);
            Eigen::Matrix<double, Eigen::Dynamic, 1> bias(n_ests);
            stan::math::initialize(bias, DUMMY_VAR__);
            stan::math::fill(bias, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 25;
            for (int x = 1; x <= n_ests; ++x) {
                current_statement_begin__ = 26;
                stan::model::assign(bias, 
                            stan::model::cons_list(stan::model::index_uni(x), stan::model::nil_index_list()), 
                            stan::math::exp(((get_base1(bias_a, get_base1(design, x, "design", 1), "bias_a", 1) + (get_base1(bias_b, get_base1(design, x, "design", 1), "bias_b", 1) * get_base1(covariate, get_base1(study, x, "study", 1), "covariate", 1))) - 1)), 
                            "assigning variable bias");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 23;
            check_greater_or_equal(function__, "bias", bias, 0.01);
            // write transformed parameters
            if (include_tparams__) {
                size_t bias_j_1_max__ = n_ests;
                for (size_t j_1__ = 0; j_1__ < bias_j_1_max__; ++j_1__) {
                    vars__.push_back(bias(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_stan_size_het";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t bias_a_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < bias_a_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bias_a" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t bias_b_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < bias_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bias_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t bias_j_1_max__ = n_ests;
            for (size_t j_1__ = 0; j_1__ < bias_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "bias" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t bias_a_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < bias_a_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bias_a" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t bias_b_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < bias_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bias_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t bias_j_1_max__ = n_ests;
            for (size_t j_1__ = 0; j_1__ < bias_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "bias" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_stan_size_het_namespace::model_stan_size_het stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
