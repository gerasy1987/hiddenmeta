% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deprecating.R
\name{get_study_population_tidy}
\alias{get_study_population_tidy}
\title{Simulate single population with given network structure using tidyverse}
\usage{
get_study_population_tidy(
  network_handler = sim_block_network,
  network_handler_args,
  group_names,
  p_visible,
  add_groups
)
}
\arguments{
\item{network_handler}{function that takes several arguments and returns igraph network object with vertex attribute \code{type} in the binary coded format (consists of 0's and 1's only)}

\item{network_handler_args}{list of arguments passed to \code{network_handler}}

\item{group_names}{character vector of groups within population with last group being hidden}

\item{p_visible}{named list of visibility tendencies by group. This is used as mean of Beta distribution (with SD = 0.09) to generate probability of being recognized as member of group, being sampled as seed, etc. The order of objects in list have to follow the order of \code{group_names}}

\item{add_groups}{named list of probabilities of additional group memberships. Examples include probability of service utilization (for service multiplier), being present at particular time-location (for TLS), etc.}
}
\value{
Population data frame for single study
}
\description{
Simulate single population with given network structure using tidyverse
}
\examples{
\dontrun{
  get_study_population_tidy(
    network_handler = sim_block_network,
    network_handler_args =
      list(N = 1000, K = 2, prev_K = c(known = .1, hidden = .2), rho_K = 0,
           p_edge_within = list(known = c(0.1, 0.1), hidden = c(0.1, 0.3)),
           p_edge_between = list(known = 0.02, hidden = 0.02),
           directed = FALSE),

    # groups
    group_names = c("known", "hidden"),

    # probability of visibility (show-up) for each group
    p_visible = list(known = 1, hidden = 1),

    # probability of service utilization in hidden population
    # for service multiplier
    add_groups =
      list(
        service_use = "rbinom(n(), 1, 0.25)",
        "purrr::map_df(hidden, ~ sapply( `names<-`(rep(0.2, times = 10),
        paste0('loc_', 1:10)), function(add) rbinom(length(.x), 1, 0.05 + .x * add)))",
        known_2 = 0.3,
        "purrr::map_df(known, ~ sapply( `names<-`(rep(0, times = 8),
        paste0('known_', 3:10)), function(add) rbinom(length(.x), 1, 0.3)))")
  )
}

}
