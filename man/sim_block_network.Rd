% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers_network.R
\name{sim_block_network}
\alias{sim_block_network}
\title{Handler for Simulation of Network Using Block Model}
\usage{
sim_block_network(
  N = 2000,
  K = 2,
  prev_K = c(known = 0.3, hidden = 0.1),
  rho_K = 0.05,
  p_edge_within = list(known = c(0.05, 0.05), hidden = c(0.05, 0.9)),
  p_edge_between = list(known = 0.05, hidden = 0.01),
  directed = FALSE
)
}
\arguments{
\item{N}{number of units in population}

\item{K}{number of groups}

\item{prev_K}{named numeric vector of prevalence for each group with last group being hidden}

\item{rho_K}{numeric vector of correlations in group memberships}

\item{p_edge_within}{named list of numeric vectors giving probability of link between in-group members and out-group members for each of groups. The order of objects in list have to follow the order of \code{prev_K}}

\item{p_edge_between}{named list of numeric values giving probability of link between in- and out-group member for each of groups. The order of objects in list have to follow the order of \code{prev_K}}

\item{directed}{logical, whether links are directed or undirected}
}
\value{
igraph network object with vertex attribute \code{type} in the binary coded format (consists of 0's and 1's only)
}
\description{
Draw a Simulation of Network Using Block Matrix of Probabilities of Edges Based on Group Memberships
}
\examples{
\dontrun{
sim_block_network(
  # total population size for one study
  N = 1000,
  # number of groups
  # (K-th group is hidden population we are interested in)
  K = 2,
  # probability of membership in each of the groups (prev_K[K] is the true prevalence)
  prev_K = c(known = .3, hidden = .1),
  # correlation matrix of group memberships
  rho_K = .05,
  # block edge probabilities depending on group memberships
  # 1 - list of in- and out-group probability of links for each group
  # 2 - probability of link between in- and out-group members
  p_edge_within = list(known = c(0.05, 0.05), hidden = c(0.05, 0.9)),
  p_edge_between = list(known = 0.05, hidden = 0.01),
  directed = FALSE)
}

}
